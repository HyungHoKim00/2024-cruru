name: BE/CD - [DEV] Build & Deploy

on:
  workflow_dispatch:
  push:
    branches: be/develop

jobs:
  build:
    environment: dev
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set timezone to Korea
      uses: szenius/set-timezone@v2.0
      with:
        timezoneLinux: "Asia/Seoul"

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
          cache-write-only: true

    - name: Build with Gradle
      run: ./gradlew bootJar

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Get current date and time
      id: datetime
      run: |
        echo "datetime=$(date +'%Y%m%d%H%M%S')" >> "$GITHUB_OUTPUT"

    - name: Image build and push
      run: |
        docker build --build-arg PROFILE=dev -t ${{ secrets.DOCKER_REPO_NAME }}/cruru:dev-${{ steps.datetime.outputs.datetime }} --platform linux/arm64 .
        docker push ${{ secrets.DOCKER_REPO_NAME }}/cruru:dev-${{ steps.datetime.outputs.datetime }}

    - name: Upload docker-compose yaml script to artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-compose
        path: |
          ${{ github.workspace }}/backend/docker-compose.dev.yml
          ${{ github.workspace }}/backend/promtail-config.yml
    outputs:
      BUILD_VERSION: ${{ steps.datetime.outputs.datetime }}

  deploy:
    environment: dev
    runs-on: [self-hosted, be-dev]
    needs: build
    
    steps:
    - name: Checkout private repository for deploy files
      uses: actions/checkout@v4
      with:
        repository: ${{ secrets.PRIVATE_REPOSITORY_URL }}
        token: ${{ secrets.PRIVATE_REPOSITORY_TOKEN }}
        path: dev-files

    - name: Copy dev files to backend
      run: |
        mkdir -p ${{ github.workspace }}/backend
        cp ${{ github.workspace }}/dev-files/develop/docker-compose.dev.yml ${{ github.workspace }}/backend/docker-compose.dev.yml
        cp ${{ github.workspace }}/dev-files/develop/promtail-config.yml ${{ github.workspace }}/backend/promtail-config.yml

    - name: Extract secrets as .env file
      run: |
        cat <<EOF > ${{ github.workspace }}/backend/.env
        # Docker Hub info from Github Secrets
        DOCKER_IMAGE_VERSION_TAG=dev-${{ needs.build.outputs.BUILD_VERSION }}
        EOF
    # - name: Check if MySQL container is running
    #   id: mysql_running
    #   run: |
    #     if [ "$(sudo docker ps -q -f name=database-container)" ]; then
    #       echo "mysql_running=true" >> $GITHUB_ENV
    #     else
    #       echo "mysql_running=false" >> $GITHUB_ENV
    #     fi
        
    # - name: Start MySQL container if not running
    #   if: env.mysql_running == 'false'
    #   run: |
    #     sudo docker-compose --env-file .env -f docker-compose.dev.yml up -d database-mysql

    # - name: Stop and remove existing application container
    #   run: |
    #     sudo docker-compose -f docker-compose.dev.yml stop application
    #     sudo docker-compose -f docker-compose.dev.yml rm -f application
        
    # - name: Run application Server container
    #   run: |
    #     sudo docker-compose --env-file .env -f docker-compose.dev.yml up -d application

    - name: Stop and remove existing application container
      run: |
        sudo docker-compose -f docker-compose.dev.yml down --rmi all
        
    - name: Run application Server container
      run: |
        sudo docker-compose -f docker-compose.dev.yml up -d
